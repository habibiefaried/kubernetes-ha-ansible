---

### Based on https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/

- name: Inventory validation
  hosts: localhost
  gather_facts: false
  tasks:
    - assert:
        that:
          - "groups['loadbalancer'] | length == 1"
          - "groups['initroot'] | length == 1"
          - "groups['initroot'][0] != groups['loadbalancer'][0]"
    - assert: { that: "'{{ item }}' not in groups['slave']" }
      with_items: "{{ groups['master'] }}"
    - assert: { that: "'{{ item }}' not in groups['slave']" }
      with_items: "{{ groups['loadbalancer'] }}"
    - assert: { that: "'{{ item }}' not in groups['initroot']" }
      with_items: "{{ groups['master'] }}"
    - assert: { that: "'{{ item }}' not in groups['initroot']" }
      with_items: "{{ groups['slave'] }}"
    - assert: { that: "'{{ item }}' not in groups['master']" }
      with_items: "{{ groups['loadbalancer'] }}"

- hosts: all
  gather_facts: False
  tasks:
    - name: install python 2
      raw: test -e /usr/bin/python || (sudo apt -y update && sudo apt install -y python-minimal)

- hosts: all
  become: true
  tasks:
    - name: "Install pre-req"
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - python
        - openssl
        - snapd

    - name: Insert a line at the end of a file
      lineinfile:
        path: /root/.bashrc
        line: PATH=$PATH:/snap/bin

- hosts: loadbalancer
  become: true
  tasks:
    - name: "Installing HA Proxy"
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - haproxy
        - liblua5.3-0
        - vim-haproxy
        - haproxy-doc

    - name: "Configure HA Proxy"
      template: src=etc-haproxy-haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg mode=0644
      notify: restart haproxy

  handlers:
    - name: restart haproxy
      service: name=haproxy state=restarted

# Prepare for all k8s pre-requisites
- hosts: master,slave,initroot
  become: true
  tasks:
    - name: "Check hostname"
      shell: "hostname"
      register: host_out

    - debug: var=host_out.stdout_lines

    - name: "Install docker dependencies"
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common

    - name: "Add APT key"
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        validate_certs: no
        state: present

    - name: "Get the version"
      shell: "lsb_release -cs"
      register: ubuntu_version

    - name: "Add APT Repository"
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ubuntu_version.stdout}} stable
        state: present

    - name: "Install docker dependencies"
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - docker-ce=18.06.2~ce~3-0~ubuntu

    - name: Copy docker config file
      copy:
        src: etc-docker-daemon.json
        dest: /etc/docker/daemon.json

    - name: Creates directory
      file:
        path: /etc/systemd/system/docker.service.d
        state: directory

    - name: Remove swapfile from /etc/fstab
      mount:
        name: swap
        fstype: swap
        state: absent

    - name: Disable swap
      shell: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Restart docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: "Add APT key install kubelet kubeadm kubectl"
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        validate_certs: no
        state: present

    - name: "Add APT Repository install kubelet kubeadm kubectl"
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
    
    - name: "Holding these apt using apt-mark"
      shell: apt-mark hold kubelet kubeadm kubectl

    - name: "Install kubeadm dependencies"
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - kubelet=1.16.2-00
        - kubeadm
        - kubectl

# Initialize the init-control plane
- hosts: initroot
  become: true
  tasks:
    - name: Put initial kubeadm config
      template: src=root-kubeadm-config-yaml.j2 dest=/root/kubeadm-config.yaml mode=0644

    - name: Init kubeadm
      shell: kubeadm init --config=/root/kubeadm-config.yaml --upload-certs
      register: output_after_init
      ignore_errors: yes 

    - debug: var=output_after_init.stdout_lines

    - name: Get join string
      command: kubeadm token create --print-join-command
      register: join_command

    - name: "Add command string into joining hosts"
      add_host:
         name: "JOIN_COMMAND"
         cmd: "{{ join_command.stdout }}"

    - name: Setting up kubectl
      file:
        path: /root/.kube/
        state: directory

    - name: Copying and set chmod
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'

    - name: Get kubectl version
      shell: kubectl version | base64 | tr -d '\n'
      register: kubectl_version

    - debug: var=kubectl_version.stdout_lines

    - name: Run network (weave works)
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{ kubectl_version.stdout }}"
      ignore_errors: yes

# Prepare for working/slave nodes
- hosts: slave
  serial: 1
  become: true
  tasks:
    - debug: var=hostvars['JOIN_COMMAND']['cmd']

    - name: "Init for slave"
      shell: "{{ hostvars['JOIN_COMMAND']['cmd'] }}"
      ignore_errors: yes

# Joining as control-plane to init-plan above
- hosts: master
  serial: 1
  become: true
  tasks:
    - name: "Init for master"
      shell: "{{ hostvars['JOIN_COMMAND']['cmd'] }} --control-plane --certificate-key {{ cert_key }}"

    - name: Setting up kubectl
      file:
        path: /root/.kube/
        state: directory

    - name: Copying and set chmod
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        mode: '0600'

# Adding master nodes after get finished with initialize master nodes
- hosts: loadbalancer
  become: true
  tasks:
    - name: "Configure HA Proxy"
      template: src=etc-haproxy-haproxy-end.cfg.j2 dest=/etc/haproxy/haproxy.cfg mode=0644
      notify: restart haproxy

  handlers:
    - name: restart haproxy
      service: name=haproxy state=restarted

- hosts: initroot
  become: true
  tasks:
    - name: install helm chart
      shell: snap install helm --classic

    - name: init helm
      shell: /snap/bin/helm init

    - name: svc account tiller for helm
      shell: kubectl create serviceaccount tiller --namespace kube-system
      ignore_errors: yes

    - name: tiller-clusterrolebinding.yaml
      copy:
        src: tiller-clusterrolebinding.yaml
        dest: /root/tiller-clusterrolebinding.yaml

    - name: upgrade tiller
      shell: kubectl apply -f /root/tiller-clusterrolebinding.yaml 
      